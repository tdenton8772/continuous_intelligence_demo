[
    {
        "name": "Rules Based - temp high",
        "narrative": "The Temperature from the RTU is to low",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE temperature > 90 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - temp low",
        "narrative": "The Temperature from the RTU is to high",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE temperature < 60 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - compressor_current high",
        "narrative": "The Compressor Current from the RTU is to High",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE compressor_current > 15 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "The Compressor Current from the RTU is to Low",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE compressor_current < 7 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - fan_speed high",
        "narrative": "The Fan Speed from the RTU is to High",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE fan_speed > 1800 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - fan_speed low",
        "narrative": "The Fan Speed from the RTU is to Low",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE fan_speed < 800 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - pressure high",
        "narrative": "The Pressure from the RTU is to High",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE pressure > 65 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name": "Rules Based - pressure low",
        "narrative": "The Pressure from the RTU is to Low",
        "sql": "SELECT machine_id, MAX(event_time) AS latest_event_time FROM aws_demo WHERE pressure < 35 AND event_time >= cast(NOW() as BIGINT) - (60*60*1000*1) GROUP BY machine_id LIMIT 5;"
    },
    {
        "name":"Linear Regression - RTU-1 - Temperature",
        "narrative":"The Temperature from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(temperature) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_1' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_1' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.temperature) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.temperature) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_1' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and temperature between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.temperature, (rp.slope * rtu.event_time + rp.intercept) AS predicted_temperature, ABS( rtu.temperature - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_1' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.temperature, rtu.predicted_temperature, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-2 - Temperature",
        "narrative":"The Temperature from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(temperature) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_2' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_2' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.temperature) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.temperature) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_2' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and temperature between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.temperature, (rp.slope * rtu.event_time + rp.intercept) AS predicted_temperature, ABS( rtu.temperature - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_2' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.temperature, rtu.predicted_temperature, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-3 - Temperature",
        "narrative":"The Temperature from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(temperature) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_3' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.temperature - s.avg_temp) * (m.temperature - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_3' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.temperature) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.temperature) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_3' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and temperature between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.temperature, (rp.slope * rtu.event_time + rp.intercept) AS predicted_temperature, ABS( rtu.temperature - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_3' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.temperature, rtu.predicted_temperature, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-1 - compressor_current",
        "narrative":"The compressor_current from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(compressor_current) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_1' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_1' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.compressor_current) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.compressor_current) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_1' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and compressor_current between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.compressor_current, (rp.slope * rtu.event_time + rp.intercept) AS predicted_compressor_current, ABS( rtu.compressor_current - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_1' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.compressor_current, rtu.predicted_compressor_current, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-2 - compressor_current",
        "narrative":"The compressor_current from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(compressor_current) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_2' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_2' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.compressor_current) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.compressor_current) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_2' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and compressor_current between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.compressor_current, (rp.slope * rtu.event_time + rp.intercept) AS predicted_compressor_current, ABS( rtu.compressor_current - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_2' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.compressor_current, rtu.predicted_compressor_current, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-3 - compressor_current",
        "narrative":"The compressor_current from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(compressor_current) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_3' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.compressor_current - s.avg_temp) * (m.compressor_current - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_3' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.compressor_current) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.compressor_current) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_3' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and compressor_current between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.compressor_current, (rp.slope * rtu.event_time + rp.intercept) AS predicted_compressor_current, ABS( rtu.compressor_current - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_3' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.compressor_current, rtu.predicted_compressor_current, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-1 - fan_speed",
        "narrative":"The fan_speed from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(fan_speed) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_1' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_1' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.fan_speed) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.fan_speed) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_1' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and fan_speed between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.fan_speed, (rp.slope * rtu.event_time + rp.intercept) AS predicted_fan_speed, ABS( rtu.fan_speed - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_1' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.fan_speed, rtu.predicted_fan_speed, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-2 - fan_speed",
        "narrative":"The fan_speed from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(fan_speed) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_2' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_2' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.fan_speed) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.fan_speed) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_2' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and fan_speed between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.fan_speed, (rp.slope * rtu.event_time + rp.intercept) AS predicted_fan_speed, ABS( rtu.fan_speed - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_2' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.fan_speed, rtu.predicted_fan_speed, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-3 - fan_speed",
        "narrative":"The fan_speed from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(fan_speed) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_3' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.fan_speed - s.avg_temp) * (m.fan_speed - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_3' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.fan_speed) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.fan_speed) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_3' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and fan_speed between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.fan_speed, (rp.slope * rtu.event_time + rp.intercept) AS predicted_fan_speed, ABS( rtu.fan_speed - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_3' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.fan_speed, rtu.predicted_fan_speed, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-1 - pressure",
        "narrative":"The pressure from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(pressure) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_1' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_1' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.pressure) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.pressure) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_1' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and pressure between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.pressure, (rp.slope * rtu.event_time + rp.intercept) AS predicted_pressure, ABS( rtu.pressure - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_1' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.pressure, rtu.predicted_pressure, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-2 - pressure",
        "narrative":"The pressure from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(pressure) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_2' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_2' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.pressure) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.pressure) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_2' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and pressure between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.pressure, (rp.slope * rtu.event_time + rp.intercept) AS predicted_pressure, ABS( rtu.pressure - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_2' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.pressure, rtu.predicted_pressure, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    },
    {
        "name":"Linear Regression - RTU-3 - pressure",
        "narrative":"The pressure from the RTU is outside the predicted range",
        "sql": "WITH _cte1 AS ( SELECT AVG(pressure) as avg_temp, count(*) as _cnt FROM aws_demo WHERE machine_id = 'RTU_3' AND event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), _cte2 as ( select sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) + max(s.avg_temp) as std_dev_high, max(s.avg_temp) - sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as std_dev_low, sqrt( sum( (m.pressure - s.avg_temp) * (m.pressure - s.avg_temp) ) / max(s._cnt) ) as stddev from aws_demo m cross join _cte1 as s WHERE m.machine_id = 'RTU_3' AND m.event_time >= (NOW() - (60 * 60 * 1000 * 0.1))  ), regression AS ( SELECT COUNT(*) AS n, SUM(a.event_time) AS sum_x, SUM(a.pressure) AS sum_y, SUM(a.event_time * a.event_time) AS sum_x2, SUM(a.event_time * a.pressure) AS sum_xy FROM aws_demo a cross join _cte2 s WHERE machine_id = 'RTU_3' AND event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) and pressure between s.std_dev_low and s.std_dev_high ), regression_params AS ( SELECT (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) AS slope, ( sum_y - ( (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x) ) * sum_x ) / n AS intercept FROM regression ), residuals AS ( SELECT rtu.event_time, rtu.pressure, (rp.slope * rtu.event_time + rp.intercept) AS predicted_pressure, ABS( rtu.pressure - (rp.slope * rtu.event_time + rp.intercept) ) AS residual FROM aws_demo rtu CROSS JOIN regression_params rp WHERE rtu.machine_id = 'RTU_3' AND rtu.event_time >= cast(NOW() as BIGINT) - (60 * 60 * 1000 * 0.1) ), anomaly_threshold AS ( SELECT PERCENTILEEST(residual, 99) AS threshold FROM residuals ) SELECT rtu.event_time, rtu.pressure, rtu.predicted_pressure, rtu.residual, th.threshold FROM residuals rtu CROSS JOIN anomaly_threshold th WHERE rtu.residual > th.threshold + (1 * (select stddev from _cte2)) ORDER BY rtu.event_time DESC LIMIT 1;"
    }
]