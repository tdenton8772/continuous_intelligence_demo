version: "3.8"
services:
  flask_app:
    build: 
      context: .
      dockerfile: DockerFileControlPanel
    container_name: flask_app
    ports:
      - "5000:5000"
    depends_on:
      - mqtt_bridge
      - kinesis_setup
    environment:
      - FLASK_ENV=development
      - FLASK_APP=run.py
      - PINOT_API_KEY=${PINOT_API_KEY}
      - PINOT_BROKER=${PINOT_BROKER}
      - PINOT_CONTROLLER=${PINOT_CONTROLLER}
    volumes:
      - ./control_panel:/app
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials
    command: ["python", "run.py"]

  mqtt_bridge:
    build: 
      context: .
      dockerfile: DockerFileMQTTBridge
    container_name: mqtt_bridge
    depends_on:
      - kinesis_setup
      - mqtt_broker
    volumes:
      - ./mqtt_proxy:/app
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials
    command: ["python", "mqtt_bridge.py"]
  
  mqtt_broker:
    image: eclipse-mosquitto
    container_name: mqtt_broker
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt_proxy/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials

  kinesis_setup:
    image: amazon/aws-cli
    container_name: kinesis_setup
    environment:
      - AWS_PROFILE=${AWS_PROFILE}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    volumes:
      - ~/.aws:/root/.aws:ro  # Mount AWS credentials into container
    entrypoint: >
      /bin/sh -c "
      aws kinesis describe-stream --stream-name RTU_Machine_Data --profile default || 
      aws kinesis create-stream --stream-name RTU_Machine_Data --shard-count 1 --profile default &&
      echo 'Kinesis stream created';
      exit 0;"

  pinot_setup:
    image: curlimages/curl
    container_name: pinot_setup
    depends_on:
      - kinesis_setup
    environment:
      - PINOT_API_KEY=${PINOT_API_KEY}
      - PINOT_BROKER=${PINOT_BROKER}
      - PINOT_CONTROLLER=${PINOT_CONTROLLER}
    volumes:
      - ./pinot_config:/config
    entrypoint: >
      /bin/sh -c "
      sleep 20;
      curl -X POST ${PINOT_CONTROLLER}/schemas -H 'accept: application/json' -H 'Authorization: Bearer ${PINOT_API_KEY}' -H 'Content-Type: application/json' -d @/config/table_1-schema.json;
      curl -X POST ${PINOT_CONTROLLER}/tables -H 'accept: application/json' -H 'Authorization: Bearer ${PINOT_API_KEY}' -H 'Content-Type: application/json' -d @/config/table_1-table.json;
      echo 'StarTree schema and table setup completed!';
      exit 0;"

  anomaly_service:
    build: 
      context: .
      dockerfile: DockerFileAnomalyDetection
    container_name: anomaly_service
    restart: unless-stopped
    environment:
      - PINOT_API_KEY=${PINOT_API_KEY}
      - PINOT_BROKER=${PINOT_BROKER}
      - PINOT_CONTROLLER=${PINOT_CONTROLLER}
      - AWS_PROFILE=${AWS_PROFILE}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    volumes:
      - ./anomaly_detection:/app
      - ~/.aws:/root/.aws:ro
    command: ["sh", "-c", "python detection.py && sleep 60"]